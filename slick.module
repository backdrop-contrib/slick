<?php
/**
 * @file
 * Slick carousel integration, the last carousel you'll ever need.
 */

define('SLICK_VERSION', '1.x');

/**
 * Implements hook_theme().
 */
function slick_theme($existing, $type, $theme, $path) {
  $base = array(
    'file' => 'slick.theme.inc',
    'path' => $path . '/templates',
  );

  $themes = array();
  $items = array('slick', 'item', 'grid', 'media', 'wrapper');
  foreach ($items as $item) {
    $key = $item == 'slick' ? $item : "slick_$item";
    $themes[$key] = $base + array(
      'render element' => 'element',
      'template' => $item == 'wrapper' ? '' : strtr($key, '_', '-'),
    );
  }

  $themes['slick_image_lazy'] = $base + array(
    'variables' => array(
      'item' => NULL,
      'lazy' => FALSE,
      'image_style' => NULL,
      'url' => NULL,
      'attributes' => array(),
      'options' => array(),
    ),
  );

  return $themes;
}

/**
 * Implements hook_permission().
 */
function slick_permission() {
  return array(
    'administer slick' => array(
      'title' => t('Administer the Slick carousel module'),
    ),
  );
}

/**
 * Implements hook_ctools_plugin_api().
 */
function slick_ctools_plugin_api($owner, $api) {
  if ($owner == 'slick' && $api == 'slick_default_preset') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_hook_info().
 */
function slick_hook_info() {
  $hooks['slick_arrows_info'] = array('group' => 'slick');
  $hooks['slick_dots_info']   = array('group' => 'slick');
  $hooks['slick_skins_info']  = array('group' => 'slick');
  return $hooks;
}

/**
 * Implements hook_library().
 */
function slick_library() {
  $library_path = libraries_get_path('slick');
  $path = drupal_get_path('module', 'slick');
  $info = system_get_info('module', 'slick');

  $common = array(
    'website' => 'http://drupal.org/project/slick',
    'version' => !empty($info['version']) ? $info['version'] : '7.x-2.x',
  );

  $libraries = array();
  $libraries['slick'] = array(
    'title' => 'Slick',
    'website' => 'http://kenwheeler.github.io/slick/',
    'version' => SLICK_VERSION,
    'js' => array(
      $library_path . '/slick/slick.min.js' => array('group' => JS_LIBRARY),
    ),
    'css' => array(
      $library_path . '/slick/slick.css' => array(),
    ),
  );

  $libraries['slick.colorbox'] = $common + array(
    'title' => 'Slick colorbox',
    'js' => array(
      $path . '/js/slick.colorbox.min.js' => array('group' => JS_DEFAULT, 'weight' => 1),
    ),
    'css' => array(
      $path . '/css/components/slick.colorbox.css' => array(),
      $path . '/css/components/slick.lightbox.css' => array(),
    ),
  );

  $libraries['slick.photobox'] = $common + array(
    'title' => 'Slick photobox',
    'js' => array(
      $path . '/js/slick.photobox.min.js' => array('group' => JS_DEFAULT, 'weight' => 1),
    ),
    'css' => array(
      $path . '/css/components/slick.lightbox.css' => array(),
    ),
    'dependencies' => array(
      array('photobox', 'photobox'),
    ),
  );

  $libraries['slick.media'] = $common + array(
    'title' => 'Slick media',
    'js' => array(
      $path . '/js/slick.media.min.js' => array('group' => JS_DEFAULT, 'weight' => 2),
    ),
    'css' => array(
      $path . '/css/components/slick.media.css' => array(),
    ),
  );

  $libraries['slick.admin'] = $common + array(
    'title' => 'Slick admin',
    'js' => array(
      $path . '/js/slick.admin.ui.min.js' => array('group' => JS_DEFAULT, 'weight' => 3),
    ),
    'css' => array(
      $path . '/css/admin/slick.admin--ui.css' => array(),
      $path . '/css/admin/slick.admin--ui--field.css' => array(),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_libraries_info().
 */
function slick_libraries_info() {
  $libraries['slick'] = array(
    'name' => 'Slick',
    'vendor url' => 'http://kenwheeler.github.io',
    'download url' => 'https://github.com/kenwheeler/slick/',
    'version' => SLICK_VERSION,
    'version arguments' => array(
      'file' => 'slick/slick.js',
      'pattern' => '/Version: (\d+\.\d+\.\d+)/',
    ),
    'files' => array(
      'js' => array('slick/slick.min.js'),
      'css' => array('slick/slick.css'),
    ),
  );

  return $libraries;
}

/**
 * Returns #attached array for needed JS and CSS for the given slick.
 *
 * @param array $attach
 *   An array of conditions to load the relevant assets, or libraries.
 *
 * @return array
 *   The array formatted for the '#attached' property.
 */
function slick_attach(array $attach) {
  $path  = drupal_get_path('module', 'slick');
  $skins = slick_skins();
  $load  = array();
  $load['css'] = $load['js'] = array();
  $defaults = array(
    'attach_slick_element' => TRUE,
    'attach_module'        => TRUE,
    'attach_module_css'    => TRUE,
  );
  $attach = array_merge($defaults, $attach);

  // Allows attach information to be altered.
  drupal_alter('slick_attach_info', $attach);

  $easing = libraries_get_path('easing') . '/jquery.easing.min.js';
  $load['js'] += array($easing => array('group' => JS_LIBRARY, 'weight' => -6));

  if (isset($attach['attach_mousewheel']) && $attach['attach_mousewheel']) {
    $mousewheel = libraries_get_path('mousewheel') . '/jquery.mousewheel.min.js';
    $load['js'] += array($mousewheel => array('group' => JS_LIBRARY, 'weight' => -5));
  }

  $load['library'][] = array('slick', 'slick');

  if ($attach['attach_module']) {
    $load['js'] += array($path . '/js/slick.load.min.js' => array('group' => JS_DEFAULT, 'weight' => 0));
  }

  $components = array('colorbox', 'photobox', 'media');
  foreach ($components as $component) {
    if (isset($attach['attach_' . $component]) && $attach['attach_' . $component]) {
      $load['library'][] = array('slick', 'slick.' . $component);
    }
  }

  if (isset($attach['attach_skin']) && $skin = $attach['attach_skin']) {
    if (isset($skins[$skin]['css'])) {
      if ($attach['attach_slick_element']) {
        $load['css'] += array(libraries_get_path('slick') . '/slick/slick-theme.css' => array('weight' => -100));
      }
      if ($attach['attach_module_css']) {
        $load['css'] += array($path . '/css/theme/slick.theme.css' => array('weight' => -99));
      }
      if (isset($attach['attach_dots_thumbnail']) && $attach['attach_dots_thumbnail']) {
        $load['css'] += array($path . '/css/components/slick.dots--thumbnail.css' => array('weight' => -98));
      }
      if (is_array($skins[$skin]['css'])) {
        $load['css'] += $skins[$skin]['css'];
      }
    }
    if (isset($skins[$skin]['js']) && is_array($skins[$skin]['js'])) {
      $load['js'] += $skins[$skin]['js'];
    }
  }

  $navs = array('thumbnail', 'arrows', 'dots');
  foreach ($navs as $nav) {
    $nav_skins = $nav == 'arrows' ? slick_arrows() : ($nav == 'dots' ? slick_dots() : $skins);
    if (isset($attach['attach_skin_' . $nav]) && $skin = $attach['attach_skin_' . $nav]) {
      if (isset($nav_skins[$skin]['css']) && is_array($nav_skins[$skin]['css'])) {
        $load['css'] += $nav_skins[$skin]['css'];
      }
    }
  }

  // Inline CSS for individual FC slide color, or fullscreen skin.
  if (isset($attach['attach_inline_css']) && $inline_css = $attach['attach_inline_css']) {
    $load['css'][] = array(
      'data' => $inline_css,
      'type' => 'inline',
      'group' => CSS_THEME + 1,
    );
  }

  // Attach default JS settings to allow responsive displays have a lookup.
  $load['js'][] = array(
    'data' => array('slick' => _slick_optionset_defaults('settings', TRUE)),
    'type' => 'setting',
  );

  drupal_alter('slick_attach_load_info', $load, $attach, $skins);
  return $load;
}

/**
 * Defines a list of options available for the Slick.
 *
 * @return array
 *   All available Slick carousel options.
 */
function slick_get_options() {
  $options = &drupal_static(__FUNCTION__, NULL);

  if (!isset($options)) {
    $options = array(
      'mobileFirst'       => FALSE,
      'asNavFor'          => '',
      'accessibility'     => TRUE,
      'adaptiveHeight'    => FALSE,
      'autoplay'          => FALSE,
      'autoplaySpeed'     => 3000,
      'pauseOnHover'      => TRUE,
      'pauseOnDotsHover'  => FALSE,
      'arrows'            => TRUE,
      'appendArrows'      => '$(element)',
      'prevArrow'         => '<button type="button" data-role="none" class="slick-prev" aria-label="previous">Previous</button>',
      'nextArrow'         => '<button type="button" data-role="none" class="slick-next" aria-label="next">Next</button>',
      'centerMode'        => FALSE,
      'centerPadding'     => '50px',
      'dots'              => FALSE,
      'dotsClass'         => 'slick-dots',
      'appendDots'        => '$(element)',
      'draggable'         => TRUE,
      'fade'              => FALSE,
      'focusOnSelect'     => FALSE,
      'infinite'          => TRUE,
      'initialSlide'      => 0,
      'lazyLoad'          => 'ondemand',
      'respondTo'         => 'window',
      'rtl'               => FALSE,
      'rows'              => 1,
      'slidesPerRow'      => 1,
      'slide'             => '',
      'slidesToShow'      => 1,
      'slidesToScroll'    => 1,
      'speed'             => 500,
      'swipe'             => TRUE,
      'swipeToSlide'      => FALSE,
      'edgeFriction'      => 0.35,
      'touchMove'         => TRUE,
      'touchThreshold'    => 5,
      'useCSS'            => TRUE,
      'cssEase'           => 'ease',
      'cssEaseBezier'     => '',
      'cssEaseOverride'   => '',
      'easing'            => 'linear',
      'variableWidth'     => FALSE,
      'vertical'          => FALSE,
      'verticalSwiping'   => FALSE,
      'waitForAnimate'    => TRUE,
    );

    drupal_alter('slick_options_info', $options);
  }

  return $options;
}

/**
 * Default settings for a newly created optionset.
 *
 * @param string $set
 *   Gets a specific group of values [optional]: settings, general.
 * @param bool $exclude
 *   Whether to exclude some trouble options, e.g.: PHP string vs JS object.
 *
 * @return array
 *   An array of default optionset.
 */
function _slick_optionset_defaults($set = NULL, $exclude = FALSE) {
  $defaults = array();
  foreach (slick_get_options() as $name => $value) {
    $defaults['settings'][$name] = $value;
  }
  $defaults['general'] = array('goodies' => array());

  // Prevents main settings from screwing up responsive settings.
  if ($exclude) {
    $excludes = drupal_map_assoc(array(
      'mobileFirst',
      'appendDots',
      'appendArrows',
      'asNavFor',
      'prevArrow',
      'nextArrow',
      'cssEaseBezier',
      'cssEaseOverride',
    ));
    $defaults['settings'] = array_diff_key($defaults['settings'], $excludes);
  }

  return $set ? $defaults[$set] : $defaults;
}

/**
 * Returns Slick skins registered via hook_slick_skins_info().
 *
 * @return array
 *   The associative array of available skins.
 */
function slick_skins() {
  $skins = &drupal_static(__FUNCTION__, NULL);
  if (!isset($skins)) {
    $skins = module_invoke_all('slick_skins_info');
    drupal_alter('slick_skins_info', $skins);
  }
  return $skins;
}

/**
 * Returns Slick arrow skins registered via hook_slick_arrows_info().
 *
 * @return array
 *   The associative array of available arrow skins.
 */
function slick_arrows() {
  $arrows = &drupal_static(__FUNCTION__, NULL);
  if (!isset($arrows)) {
    $arrows = module_invoke_all('slick_arrows_info');
    drupal_alter('slick_arrows_info', $arrows);
  }
  return $arrows;
}

/**
 * Returns Slick dot skins registered via hook_slick_dots_info().
 *
 * @return array
 *   The associative array of available dot skins.
 */
function slick_dots() {
  $dots = &drupal_static(__FUNCTION__, NULL);
  if (!isset($dots)) {
    $dots = module_invoke_all('slick_dots_info');
    drupal_alter('slick_dots_info', $dots);
  }
  return $dots;
}

/**
 * Fetches the given optionset.
 *
 * @param string $id
 *   The optionset ID.
 *
 * @return object
 *   Returns the optionset, or default, if no optionset found.
 */
function slick_optionset_load($id) {
  ctools_include('export');
  $optionset = ctools_export_crud_load('slick_optionset', $id);

  // Ensures deleted optionset while being used doesn't screw up.
  if (!isset($optionset->name)) {
    $optionset = ctools_export_crud_load('slick_optionset', 'default');
    watchdog('slick', 'Fallback to default optionset.', array(), WATCHDOG_WARNING);
  }

  return $optionset;
}

/**
 * Create a new optionset object.
 *
 * Note that this function does not save the optionset to the database.
 *
 * @param array $values
 *   The given values to build the optionset if provided.
 *
 * @return object
 *   Returns the optionset object.
 */
function slick_optionset_create($values = array()) {
  ctools_include('export');
  $optionset = ctools_export_crud_new('slick_optionset');

  // Assign the specified values, if any.
  $optionset->options = $optionset->options['settings'] = array();
  $optionset->breakpoints = 0;
  foreach (array('name', 'label', 'skin', 'breakpoints', 'options') as $key) {
    if (isset($values[$key])) {
      $optionset->{$key} = $values[$key];
    }
  }

  // Merge default settings with any given settings.
  $optionset_defaults = _slick_optionset_defaults();
  $optionset->options = $optionset->options + $optionset_defaults;

  return $optionset;
}

/**
 * Returns a renderable array of a simple slick instance.
 *
 * @param array $slides
 *   An array of slick contents: text, image or media.
 * @param array $options
 *   An array of key:value pairs of JS options.
 * @param array $settings
 *   An array of key:value pairs of HTML/layout related settings.
 * @param array $attach
 *   An optional array of assets to load. Passing an empty array will do basic.
 * @param string $id
 *   An optional ID for the instance.
 *
 * @return array
 *   The renderable array of a slick instance, or empty array.
 */
function slick_build($slides = array(), $options = array(), $settings = array(), $attach = array(), $id = NULL) {
  $slick = array();
  if ($slides) {
    if ($id && !isset($settings['attributes'])) {
      $settings += array('attributes' => array('id' => $id));
    }

    $items = array();
    foreach ($slides as $slide) {
      $items[] = isset($slide['slide']) ? $slide : array('slide' => $slide);
    }

    $slick[] = array(
      '#theme' => 'slick',
      '#items' => $items,
      '#settings' => $settings,
      '#options' => $options,
      '#attached' => slick_attach($attach),
    );
  }
  return $slick;
}

/**
 * Implements hook_help().
 */
function slick_help($path, $arg) {
  $slick         = url(drupal_get_path('module', 'slick') . '/README.txt');
  $slick_fields  = url(drupal_get_path('module', 'slick_fields') . '/README.txt');
  $slick_views   = url(drupal_get_path('module', 'slick_views') . '/README.txt');
  $slick_example = url(drupal_get_path('module', 'slick_example') . '/README.txt');
  switch ($path) {
    case 'admin/help#slick':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t("The Slick carousel module is a field formatter to create carousels. Also available as Views style plugin. <br />To get up running quickly, <a href='@url'>enable Slick example</a> module.", array('@url' => url('admin/modules', array('fragment' => 'edit-modules-slick')))) . '</p>';
      $output .= '<p>' . t('Read <a href="@url">more info about Slick example</a> before you proceed.', array('@url' => $slick_example)) . '</p>';
      $output .= '<p>' . t('Read <a href="@url">more info about Slick</a> in general, including troubleshootings.', array('@url' => $slick)) . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl><dt>' . t('Optionsets') . '</dt>';
      $output .= '<dd>' . t('Manage optionsets at <a href="@url">Slick collection</a> page.', array('@url' => url('admin/config/media/slick'))) . '</dd>';
      $output .= '<dt>' . t('Usage as a field formatter') . '</dt>';
      $output .= '<dd>' . t('See relevant <a href="@url">README.txt</a> for Fields integration.', array('@url' => $slick_fields)) . '</dd>';
      $output .= '<dt>' . t('Usage as a Views style plugin') . '</dt>';
      $output .= '<dd>' . t('See relevant <a href="@url">README.txt</a> for Views integration.', array('@url' => $slick_views)) . '</dd></dl>';
      return $output;
  }
}
