<?php
/**
 * @file
 * Slick carousel integration, the last carousel you'll ever need.
 */

define('SLICK_VERSION', '1.x');

/**
 * Implements hook_theme().
 */
function slick_theme($existing, $type, $theme, $path) {
  $base = array(
    'file' => 'slick.theme.inc',
    'path' => $path . '/templates',
  );

  return array(
    'slick' => $base + array(
      'render element' => 'element',
      'template' => 'slick',
    ),
    'slick_wrapper' => $base + array(
      'render element' => 'element',
    ),
    'slick_item' => $base + array(
      'render element' => 'element',
      'template' => 'slick-item',
    ),
    'slick_grid' => $base + array(
      'render element' => 'element',
      'template' => 'slick-grid',
    ),
    'slick_media' => $base + array(
      'render element' => 'element',
      'template' => 'slick-media',
    ),
    'slick_image_lazy' => $base + array(
      'variables' => array(
        'item' => NULL,
        'lazy' => FALSE,
        'image_style' => NULL,
        'url' => NULL,
        'attributes' => array(),
        'options' => array(),
      ),
    ),
  );
}

/**
 * Implements hook_permission().
 */
function slick_permission() {
  return array(
    'administer slick' => array(
      'title' => t('Administer the Slick carousel module'),
    ),
  );
}

/**
 * Implements hook_ctools_plugin_api().
 */
function slick_ctools_plugin_api($owner, $api) {
  if ($owner == 'slick' && $api == 'slick_default_preset') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_hook_info().
 */
function slick_hook_info() {
  $hooks['slick_arrows_info'] = array('group' => 'slick');
  $hooks['slick_dots_info']   = array('group' => 'slick');
  $hooks['slick_skins_info']  = array('group' => 'slick');
  return $hooks;
}

/**
 * Implements hook_library().
 */
function slick_library() {
  $library_path = libraries_get_path('slick');
  $path = drupal_get_path('module', 'slick');
  $info = system_get_info('module', 'slick');

  $common = array(
    'website' => 'http://drupal.org/project/slick',
    'version' => !empty($info['version']) ? $info['version'] : '7.x-2.x',
  );

  $libraries = array();
  $libraries['slick'] = array(
    'title' => 'Slick',
    'website' => 'http://kenwheeler.github.io/slick/',
    'version' => SLICK_VERSION,
    'js' => array(
      $library_path . '/slick/slick.min.js' => array('group' => JS_LIBRARY),
    ),
    'css' => array(
      $library_path . '/slick/slick.css',
    ),
  );

  $libraries['slick.colorbox'] = $common + array(
    'title' => 'Slick colorbox',
    'js' => array(
      $path . '/js/slick.colorbox.min.js' => array('group' => JS_DEFAULT, 'weight' => 1),
    ),
    'css' => array(
      $path . '/css/components/slick.colorbox.css',
      $path . '/css/components/slick.lightbox.css',
    ),
  );

  $libraries['slick.photobox'] = $common + array(
    'title' => 'Slick photobox',
    'js' => array(
      $path . '/js/slick.photobox.min.js' => array('group' => JS_DEFAULT, 'weight' => 1),
    ),
    'css' => array(
      $path . '/css/components/slick.lightbox.css',
    ),
    'dependencies' => array(
      array('photobox', 'photobox'),
    ),
  );

  $libraries['slick.media'] = $common + array(
    'title' => 'Slick media',
    'js' => array(
      $path . '/js/slick.media.min.js' => array('group' => JS_DEFAULT, 'weight' => 2),
    ),
    'css' => array(
      $path . '/css/components/slick.media.css',
    ),
  );

  $libraries['slick.admin'] = $common + array(
    'title' => 'Slick admin',
    'js' => array(
      $path . '/js/slick.admin.ui.min.js' => array('group' => JS_DEFAULT, 'weight' => 3),
    ),
    'css' => array(
      $path . '/css/admin/slick.admin--ui.css' => array(),
      $path . '/css/admin/slick.admin--ui--field.css' => array(),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_libraries_info().
 */
function slick_libraries_info() {
  $libraries['slick'] = array(
    'name' => 'Slick',
    'vendor url' => 'http://kenwheeler.github.io',
    'download url' => 'https://github.com/kenwheeler/slick/',
    'version' => SLICK_VERSION,
    'version arguments' => array(
      'file' => 'slick/slick.js',
      'pattern' => '/Version: (\d+\.\d+\.\d+)/',
    ),
    'files' => array(
      'js' => array(
        'slick/slick.min.js',
      ),
      'css' => array(
        'slick/slick.css',
      ),
    ),
  );

  return $libraries;
}

/**
 * Returns #attached array for needed JS and CSS for the given slick.
 *
 * @param array $attach
 *   An array of conditions to load the relevant assets, or libraries.
 *
 * @return array
 *   The array formatted for the '#attached' property.
 */
function slick_attach(array $attach) {
  $path  = drupal_get_path('module', 'slick');
  $skins = slick_skins();
  $load  = array();
  $load['css'] = $load['js'] = array();
  $defaults = array(
    'attach_mousewheel'     => FALSE,
    'attach_slick_element'  => TRUE,
    'attach_module'         => TRUE,
    'attach_module_css'     => TRUE,
    'attach_media'          => FALSE,
    'attach_colorbox'       => FALSE,
    'attach_photobox'       => FALSE,
    'attach_skin'           => FALSE,
    'attach_skin_thumbnail' => FALSE,
    'attach_skin_arrows'    => FALSE,
    'attach_skin_dots'      => FALSE,
    'attach_dots_thumbnail' => FALSE,
    'attach_inline_css'     => FALSE,
  );
  $attach = array_merge($defaults, $attach);

  // Allows attach information to be altered.
  drupal_alter('slick_attach_info', $attach);

  $easing = libraries_get_path('easing') . '/jquery.easing.min.js';
  $load['js'] += array($easing => array('group' => JS_LIBRARY, 'weight' => -6));

  if ($attach['attach_mousewheel']) {
    $mousewheel = libraries_get_path('mousewheel') . '/jquery.mousewheel.min.js';
    $load['js'] += array($mousewheel => array('group' => JS_LIBRARY, 'weight' => -5));
  }

  $load['library'][] = array('slick', 'slick');

  if ($attach['attach_colorbox']) {
    $load['library'][] = array('slick', 'slick.colorbox');
  }

  if ($attach['attach_photobox']) {
    $load['library'][] = array('photobox', 'photobox');
    $load['library'][] = array('slick', 'slick.photobox');
  }

  if ($attach['attach_module']) {
    $load['js'] += array($path . '/js/slick.load.min.js' => array('group' => JS_DEFAULT, 'weight' => 0));
  }

  if ($attach['attach_media']) {
    $load['library'][] = array('slick', 'slick.media');
  }

  // Skin assets.
  if ($skin = $attach['attach_skin']) {
    if (isset($skins[$skin]['css'])) {
      // If we do have a defined skin, load the Slick element and module theme.
      if ($attach['attach_slick_element']) {
        $load['css'] += array(libraries_get_path('slick') . '/slick/slick-theme.css' => array('weight' => -100));
      }

      if ($attach['attach_module_css']) {
        $load['css'] += array($path . '/css/theme/slick.theme.css' => array('weight' => -99));
      }

      if ($attach['attach_dots_thumbnail']) {
        $load['css'] += array($path . '/css/components/slick.dots--thumbnail.css' => array('weight' => -98));
      }

      if (is_array($skins[$skin]['css'])) {
        $load['css'] += $skins[$skin]['css'];
      }
    }
    if (isset($skins[$skin]['js']) && is_array($skins[$skin]['js'])) {
      $load['js'] += $skins[$skin]['js'];
    }
  }

  if ($skin_thumbnail = $attach['attach_skin_thumbnail']) {
    if (isset($skins[$skin_thumbnail]['css']) && is_array($skins[$skin_thumbnail]['css'])) {
      $load['css'] += $skins[$skin_thumbnail]['css'];
    }
    if (isset($skins[$skin_thumbnail]['js']) && is_array($skins[$skin_thumbnail]['js'])) {
      $load['js'] += $skins[$skin_thumbnail]['js'];
    }
  }

  if ($skin_arrows = $attach['attach_skin_arrows']) {
    $arrows = slick_arrows();
    if (isset($arrows[$skin_arrows]['css']) && is_array($arrows[$skin_arrows]['css'])) {
      $load['css'] += $arrows[$skin_arrows]['css'];
    }
  }

  if ($skin_dots = $attach['attach_skin_dots']) {
    $dots = slick_dots();
    if (isset($dots[$skin_dots]['css']) && is_array($dots[$skin_dots]['css'])) {
      $load['css'] += $dots[$skin_dots]['css'];
    }
  }

  // Inline CSS for individual FC slide color, or fullscreen skin.
  if ($inline_css = $attach['attach_inline_css']) {
    $load['css'][] = array(
      'data' => $inline_css,
      'type' => 'inline',
      'group' => CSS_THEME + 1,
    );
  }

  // Attach default JS settings to allow responsive displays have a lookup.
  $defaults = _slick_optionset_defaults('settings');
  // Prevents main settings from screwing up responsive settings.
  unset(
    $defaults['mobileFirst'],
    $defaults['appendDots'],
    $defaults['appendArrows'],
    $defaults['asNavFor'],
    $defaults['prevArrow'],
    $defaults['nextArrow'],
    $defaults['cssEaseBezier'],
    $defaults['cssEaseOverride']
  );

  $load['js'][] = array(
    'data' => array(
      'slick' => $defaults,
    ),
    'type' => 'setting',
  );

  drupal_alter('slick_attach_load_info', $load, $attach, $skins);
  return $load;
}

/**
 * Defines a list of options available for the Slick.
 *
 * @return array
 *   All available Slick carousel options.
 */
function slick_get_options() {
  $options = &drupal_static(__FUNCTION__, NULL);

  if (!isset($options)) {
    $options = array(
      'mobileFirst'       => FALSE,
      'asNavFor'          => '',
      'accessibility'     => TRUE,
      'adaptiveHeight'    => FALSE,
      'autoplay'          => FALSE,
      'autoplaySpeed'     => 3000,
      'pauseOnHover'      => TRUE,
      'pauseOnDotsHover'  => FALSE,
      'arrows'            => TRUE,
      'appendArrows'      => '$(element)',
      'prevArrow'         => '<button type="button" data-role="none" class="slick-prev" aria-label="previous">Previous</button>',
      'nextArrow'         => '<button type="button" data-role="none" class="slick-next" aria-label="next">Next</button>',
      'centerMode'        => FALSE,
      'centerPadding'     => '50px',
      'dots'              => FALSE,
      'dotsClass'         => 'slick-dots',
      'appendDots'        => '$(element)',
      'draggable'         => TRUE,
      'fade'              => FALSE,
      'focusOnSelect'     => FALSE,
      'infinite'          => TRUE,
      'initialSlide'      => 0,
      'lazyLoad'          => 'ondemand',
      'respondTo'         => 'window',
      'rtl'               => FALSE,
      'rows'              => 1,
      'slidesPerRow'      => 1,
      'slide'             => '',
      'slidesToShow'      => 1,
      'slidesToScroll'    => 1,
      'speed'             => 500,
      'swipe'             => TRUE,
      'swipeToSlide'      => FALSE,
      'edgeFriction'      => 0.35,
      'touchMove'         => TRUE,
      'touchThreshold'    => 5,
      'useCSS'            => TRUE,
      'cssEase'           => 'ease',
      'cssEaseBezier'     => '',
      'cssEaseOverride'   => '',
      'easing'            => 'linear',
      'variableWidth'     => FALSE,
      'vertical'          => FALSE,
      'verticalSwiping'   => FALSE,
      'waitForAnimate'    => TRUE,
    );

    drupal_alter('slick_options_info', $options);
  }

  return $options;
}

/**
 * Defines a list of options available for the responsive Slick.
 *
 * @param int $count
 *   The number of breakpoints.
 *
 * @return array
 *   A copy of the main options with the removal of duplicated options.
 */
function slick_get_responsive_options($count = 0) {
  $options = array();
  $breakpoints = drupal_map_assoc(range(0, ($count - 1)));
  $defaults = slick_get_options();

  foreach ($breakpoints as $key => $breakpoint) {
    $options[$key] = array(
      'breakpoint' => 0,
      'unslick' => FALSE,
      'settings' => array(),
    );

    foreach (slick_clean_options($defaults) as $name => $value) {
      $options[$key]['settings'][$name] = $value;
    }
  }

  return $options;
}

/**
 * Removes problematic options for the responsive Slick.
 *
 * The problematic options are those that should exist once for a given Slick
 *   instance, or no easy way to deal with, or doesn't make sense in the
 *   responsive context. JS takes care of the relevant copy instead.
 *
 * @param array $options
 *   An array of all available options, can be form elements, or basic ones.
 *
 * @return array
 *   An array of cleaned out options for the responsive displays.
 */
function slick_clean_options(array $options) {
  $cleaned_options = array(
    'mobileFirst' => FALSE,
    'asNavFor' => FALSE,
    'slide' => FALSE,
    'lazyLoad' => FALSE,
    'prevArrow' => FALSE,
    'nextArrow' => FALSE,
    'appendArrows' => FALSE,
    'dotsClass' => FALSE,
    'appendDots' => FALSE,
    'rtl' => FALSE,
  );

  drupal_alter('slick_clean_options_info', $cleaned_options);
  return array_diff_key($options, $cleaned_options);
}

/**
 * Default settings for a newly created optionset.
 *
 * @param string $set
 *   Gets a specific group of values [optional]: settings, general.
 *
 * @return array
 *   An array of default optionset.
 */
function _slick_optionset_defaults($set = NULL) {
  $defaults = array();
  foreach (slick_get_options() as $name => $value) {
    $defaults['settings'][$name] = $value;
  }
  $defaults['general'] = array('goodies' => array());
  return $set ? $defaults[$set] : $defaults;
}

/**
 * Returns overridable options to re-use one optionset, only accepts boolean.
 *
 * @return array
 *   An array of overridable boolean options.
 */
function slick_get_overridable_options() {
  $overridables = array(
    'arrows' => t('Arrows'),
    'autoplay' => t('Autoplay'),
    'dots' => t('Dots'),
    'draggable' => t('Draggable'),
  );

  drupal_alter('slick_overridable_options_info', $overridables);
  return $overridables;
}

/**
 * Returns HTML or layout related settings, none of JS, except mousewheel.
 *
 * @param int $count
 *   The number of available Slick items.
 *
 * @return array
 *   An array of alterable default settings.
 */
function slick_get_element_default_settings($count = 0) {
  $settings = array(
    'count' => $count,
    'optionset' => 'default',
    'optionset_thumbnail' => '',
    'asnavfor_target' => '',
    'skin' => '',
    'skin_thumbnail' => '',
    'skin_arrows' => '',
    'skin_dots' => '',
    'thumbnail_hover' => '',
    'thumbnail_style' => '',
    'grid' => '',
    'field_type' => '',
    'type' => '',
    'media_switch' => FALSE,
    'is_carousel' => FALSE,
    'has_pattern' => FALSE,
    'has_arrow_down' => FALSE,
    'mousewheel' => FALSE,
    'aspect_ratio_overlay' => FALSE,
    'current_display' => 'main',
  );

  drupal_alter('slick_element_default_settings_info', $settings);
  return $settings;
}

/**
 * Strip out options similar to default values from the optionset options.
 *
 * @param object $optionset
 *   The Optionset object.
 * @param array $customs
 *   An array of handed-over JS options defined using #options property or those
 *   manipulated at theme_slick() dependent on various options.
 * @param array $context
 *   The context to check for before doing alteration, such as module settings.
 *
 * @return array
 *   An array of reduced duplicated Optionset options performance wise.
 */
function _slick_remove_default_optionset_options($optionset, $customs = array(), $context = array()) {
  $config   = array();
  $options  = $optionset->options;
  $defaults = slick_get_options();
  $settings = $customs ? $customs : $options['settings'];

  // Remove wasted dependent options if disabled, empty or not.
  slick_remove_wasted_dependent_options($settings);
  $config = array_diff_assoc($settings, $defaults);

  // Clean up responsive options if similar to the main defaults.
  $cleaned_responsives = array();
  if (isset($options['responsives']['responsive'])) {
    $responsives = $options['responsives'];
    foreach ($responsives['responsive'] as $key => $responsive) {
      if (empty($responsives['responsive'][$key]['breakpoint'])) {
        unset($responsives['responsive'][$key]);
      }
      if (isset($responsives['responsive'][$key])) {
        $cleaned_responsives[$key] = $responsive;
      }
    }
    if ($cleaned_responsives) {
      $cleaned = array();
      foreach ($cleaned_responsives as $key => $responsive) {
        $cleaned[$key]['breakpoint'] = $cleaned_responsives[$key]['breakpoint'];
        if (isset($cleaned_responsives[$key]['unslick']) && $cleaned_responsives[$key]['unslick']) {
          $cleaned[$key]['settings'] = 'unslick';
          unset($cleaned_responsives[$key]['unslick']);
        }
        else {
          slick_remove_wasted_dependent_options($cleaned_responsives[$key]['settings']);
          $cleaned[$key]['settings'] = array_diff_assoc($cleaned_responsives[$key]['settings'], $defaults);
        }
      }
      $config['responsive'] = $cleaned;
    }
  }

  drupal_alter('slick_remove_options_info', $config, $customs, $options, $context);
  return $config;
}

/**
 * Removes wasted dependent options, even if not empty.
 *
 * @param array $config
 *   An array of Optionset options.
 */
function slick_remove_wasted_dependent_options(array &$config) {
  $options = array(
    'autoplay' => array('pauseOnHover', 'pauseOnDotsHover', 'autoplaySpeed'),
    'centerMode' => array('centerPadding'),
    'arrows' => array('prevArrow', 'nextArrow', 'appendArrows'),
    'dots' => array('dotsClass', 'appendDots'),
    'swipe' => array('swipeToSlide'),
    'vertical' => array('verticalSwiping'),
  );

  foreach ($options as $key => $option) {
    if (isset($config[$key]) && empty($config[$key])) {
      foreach ($option as $dependent) {
        unset($config[$dependent]);
      }
    }
  }

  if (isset($config['cssEaseBezier']) && $config['cssEaseBezier']) {
    $config['cssEase'] = $config['cssEaseBezier'];
    unset($config['cssEaseOverride'], $config['cssEaseBezier']);
  }
}

/**
 * Returns the typecast values.
 *
 * With this, the generated JSON object has the right values.
 *
 * @param array $options
 *   An array of Optionset options.
 * @param int $breakpoints
 *   The number of breakpoints if specified.
 */
function _slick_typecast_optionset(&$options = array(), $breakpoints = 0) {
  if (empty($options)) {
    return;
  }

  $slick_options = slick_get_options();
  foreach ($slick_options as $name => $value) {
    if (isset($options['settings'][$name])) {
      $cast = gettype($slick_options[$name]);
      settype($options['settings'][$name], $cast);
    }
  }

  if (isset($options['responsives']['responsive']) && $breakpoints) {
    $slick_responsive_options = slick_get_responsive_options($breakpoints);
    foreach ($slick_responsive_options as $i => $items) {
      foreach ($items as $name => $item) {
        switch ($name) {
          case 'breakpoint':
            settype($options['responsives']['responsive'][$i][$name], 'int');
            break;

          case 'unslick':
            settype($options['responsives']['responsive'][$i][$name], 'bool');
            break;

          case 'settings':
            foreach ($item as $key => $setting) {
              if (isset($options['responsives']['responsive'][$i][$name][$key])) {
                $cast = gettype($item[$key]);
                settype($options['responsives']['responsive'][$i][$name][$key], $cast);
              }
            }
            break;

          default:
            break;
        }
      }
    }
  }

  drupal_alter('slick_typecast_optionset_info', $options, $breakpoints);
}

/**
 * Returns Slick skins registered via hook_slick_skins_info().
 *
 * @return array
 *   The associative array of available skins.
 */
function slick_skins() {
  $skins = &drupal_static(__FUNCTION__, NULL);
  if (!isset($skins)) {
    $skins = module_invoke_all('slick_skins_info');
    drupal_alter('slick_skins_info', $skins);
  }
  return $skins;
}

/**
 * Returns Slick arrow skins registered via hook_slick_arrows_info().
 *
 * @return array
 *   The associative array of available arrow skins.
 */
function slick_arrows() {
  $arrows = &drupal_static(__FUNCTION__, NULL);
  if (!isset($arrows)) {
    $arrows = module_invoke_all('slick_arrows_info');
    drupal_alter('slick_arrows_info', $arrows);
  }
  return $arrows;
}

/**
 * Returns Slick dot skins registered via hook_slick_dots_info().
 *
 * @return array
 *   The associative array of available dot skins.
 */
function slick_dots() {
  $dots = &drupal_static(__FUNCTION__, NULL);
  if (!isset($dots)) {
    $dots = module_invoke_all('slick_dots_info');
    drupal_alter('slick_dots_info', $dots);
  }
  return $dots;
}

/**
 * Checks whether a skin expecting inline CSS background, not images.
 *
 * @param string $skin
 *   The skin name.
 *
 * @return bool
 *   If the skin registers 'inline css' explicitly, returns TRUE.
 */
function slick_inline_css_skins($skin = NULL) {
  $inline_css = &drupal_static(__FUNCTION__, NULL);
  if (!isset($inline_css)) {
    $skins = slick_skins();
    $inline_css = empty($skin) ? FALSE : isset($skins[$skin]['inline css']) && $skins[$skin]['inline css'];
  }
  return $inline_css;
}

/**
 * Fetches the given optionset.
 *
 * @param string $id
 *   The optionset ID.
 *
 * @return object
 *   Returns the optionset, or default, if no optionset found.
 */
function slick_optionset_load($id) {
  ctools_include('export');
  $optionset = ctools_export_crud_load('slick_optionset', $id);

  // Ensures deleted optionset while being used doesn't screw up.
  if (!isset($optionset->name)) {
    $optionset = ctools_export_crud_load('slick_optionset', 'default');
    watchdog('slick', 'Fallback to default optionset.', array(), WATCHDOG_WARNING);
  }

  // Ensure the optionset is typecast after being loaded from the storage.
  $breakpoints = isset($optionset->breakpoints) ? $optionset->breakpoints : 0;
  _slick_typecast_optionset($optionset->options, $breakpoints);

  return $optionset;
}

/**
 * Create a new optionset object.
 *
 * Note that this function does not save the optionset to the database.
 *
 * @param array $values
 *   The given values to build the optionset if provided.
 *
 * @return object
 *   Returns the optionset object.
 */
function slick_optionset_create($values = array()) {
  ctools_include('export');
  $optionset = ctools_export_crud_new('slick_optionset');

  // Assign the specified values, if any.
  $optionset->options = $optionset->options['settings'] = array();
  $optionset->breakpoints = 0;
  foreach (array('name', 'label', 'skin', 'breakpoints', 'options') as $key) {
    if (isset($values[$key])) {
      $optionset->{$key} = $values[$key];
    }
  }

  // Merge default settings with any given settings.
  $optionset_defaults = _slick_optionset_defaults();
  $optionset->options = $optionset->options + $optionset_defaults;

  return $optionset;
}

/**
 * Returns a renderable array of a simple slick instance.
 *
 * @param array $slides
 *   An array of slick contents: text, image or media.
 * @param array $options
 *   An array of key:value pairs of JS options.
 * @param array $settings
 *   An array of key:value pairs of HTML/layout related settings.
 * @param array $attach
 *   An optional array of assets to load. Passing an empty array will do basic.
 * @param string $id
 *   An optional ID for the instance.
 *
 * @return array
 *   The renderable array of a slick instance, or empty array.
 */
function slick_build($slides = array(), $options = array(), $settings = array(), $attach = array(), $id = NULL) {
  $slick = array();
  if ($slides) {
    if ($id && !isset($settings['attributes'])) {
      $settings += array('attributes' => array('id' => $id));
    }

    $items = array();
    foreach ($slides as $slide) {
      $items[] = isset($slide['slide']) ? $slide : array('slide' => $slide);
    }

    $slick[] = array(
      '#theme' => 'slick',
      '#items' => $items,
      '#settings' => $settings,
      '#options' => $options,
      '#attached' => slick_attach($attach),
    );
  }
  return $slick;
}

/**
 * Implements hook_help().
 */
function slick_help($path, $arg) {
  $slick         = url(drupal_get_path('module', 'slick') . '/README.txt');
  $slick_fields  = url(drupal_get_path('module', 'slick_fields') . '/README.txt');
  $slick_views   = url(drupal_get_path('module', 'slick_views') . '/README.txt');
  $slick_example = url(drupal_get_path('module', 'slick_example') . '/README.txt');
  switch ($path) {
    case 'admin/help#slick':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t("The Slick carousel module is a field formatter to create carousels. Also available as Views style plugin. <br />To get up running quickly, <a href='@url'>enable Slick example</a> module.", array('@url' => url('admin/modules', array('fragment' => 'edit-modules-slick')))) . '</p>';
      $output .= '<p>' . t('Read <a href="@url">more info about Slick example</a> before you proceed.', array('@url' => $slick_example)) . '</p>';
      $output .= '<p>' . t('Read <a href="@url">more info about Slick</a> in general, including troubleshootings.', array('@url' => $slick)) . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl><dt>' . t('Optionsets') . '</dt>';
      $output .= '<dd>' . t('Manage optionsets at <a href="@url">Slick collection</a> page.', array('@url' => url('admin/config/media/slick'))) . '</dd>';
      $output .= '<dt>' . t('Usage as a field formatter') . '</dt>';
      $output .= '<dd>' . t('See relevant <a href="@url">README.txt</a> for Fields integration.', array('@url' => $slick_fields)) . '</dd>';
      $output .= '<dt>' . t('Usage as a Views style plugin') . '</dt>';
      $output .= '<dd>' . t('See relevant <a href="@url">README.txt</a> for Views integration.', array('@url' => $slick_views)) . '</dd></dl>';
      return $output;
  }
}
