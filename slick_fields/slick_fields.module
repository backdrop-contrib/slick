<?php
/**
 * @file
 * Provides fields integration for the Slick carousel.
 */

/**
 * Implements hook_field_formatter_info().
 *
 * Adds the slick format option within the manage display form of the following
 * supported fields: Image, Field collection and Media.
 */
function slick_fields_field_formatter_info() {
  $formatters['slick'] = array(
    'label' => t('Slick carousel'),
    'field types' => array('image'),
    'settings' => slick_fields_get_default_settings(),
  );

  if (module_exists('file_entity')) {
    $formatters['slick']['field types'][] = 'file';
  }

  if (module_exists('field_collection')) {
    $formatters['slick']['field types'][] = 'field_collection';
  }

  return $formatters;
}

/**
 * Implements hook_field_formatter_view().
 */
function slick_fields_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = $build = $thumb = array();

  if (count($items) > 0) {
    module_load_include('inc', 'slick_fields', 'includes/slick_fields.formatters.global');
    list($entity_id, , $bundle) = entity_extract_ids($entity_type, $entity);
    $field_name   = $field['field_name'];
    $field_type   = $field['type'];
    $slick_id     = &drupal_static('slick_id', 0);
    $item_id      = drupal_clean_css_identifier("slick-{$entity_type}-{$entity_id}-{$bundle}-{$field_name}-" . ++$slick_id);
    $thumbnail_id = $item_id . '-thumbnail';

    // Prepare settings for conditional features.
    $settings = slick_fields_get_default_settings();
    $settings += array(
      'count'              => count($items),
      'field_type'         => $field_type,
      'field_name'         => $field_name,
      'entity_id'          => $entity_id,
      'has_overlay'        => FALSE,
      'has_media'          => FALSE,
      'lightbox_ready'     => FALSE,
      'picture_ready'      => FALSE,
      'inline_css'         => '',
      'current_display'    => 'main',
      'attributes'         => array('id' => $item_id),
      'content_attributes' => array('id' => $item_id . '-slider'),
    );

    $settings         = array_merge($settings, $display['settings']);
    $view_mode        = $settings['view_mode'] ? $settings['view_mode'] : 'full';
    $is_asnavfor      = $settings['optionset_thumbnail'];
    $is_asnavfor_auto = $settings['asnavfor_auto'];

    // Load the optionset to check for lazyLoad, and other settings.
    $optionset                 = slick_optionset_load($settings['optionset']);
    $settings['lazy']          = $optionset->options['settings']['lazyLoad'];
    $settings['dots_main']     = $optionset->options['settings']['dots'];
    $settings['has_pattern']   = isset($optionset->options['general']['goodies']['pattern']) ? $optionset->options['general']['goodies']['pattern'] : FALSE;
    $settings['slide_caption'] = is_array($settings['slide_caption']) ? array_filter($settings['slide_caption']) : $settings['slide_caption'];
    $settings['is_lightbox']   = strpos($settings['media_switch'], 'box') !== FALSE;

    $attach = array(
      'attach_skin'           => $settings['skin'],
      'attach_skin_thumbnail' => $settings['skin_thumbnail'],
      'attach_skin_arrows'    => $settings['skin_arrows'],
      'attach_skin_dots'      => $settings['skin_dots'],
      'attach_colorbox'       => $settings['media_switch'] == 'colorbox-switch',
      'attach_photobox'       => $settings['media_switch'] == 'photobox-switch',
      'attach_mousewheel'     => $settings['mousewheel'],
      'attach_dots_thumbnail' => $settings['thumbnail_hover'],
    );

    if ($is_asnavfor) {
      $optionset_thumbnail = slick_optionset_load($settings['optionset_thumbnail']);
      $settings['dots_thumbnail'] = $optionset_thumbnail->options['settings']['dots'];
      if ($is_asnavfor_auto) {
        $settings['asnavfor_target'] = '#' . $thumbnail_id . '-slider';
      }
      elseif ($settings['asnavfor_main']) {
        $settings['asnavfor_target'] = $settings['asnavfor_main'];
      }
    }

    switch ($field_type) {
      case 'image':
        $attach['attach_media'] = FALSE;
        module_load_include('inc', 'slick_fields', 'includes/slick_fields.formatters.image');
        $build = _slick_fields_format_image($settings, $items, $field);
        if ($is_asnavfor) {
          $thumb = _slick_fields_format_image($settings, $items, $field, TRUE);
        }
        break;

      case 'file':
        $attach['attach_media'] = TRUE;
        module_load_include('inc', 'slick_fields', 'includes/slick_fields.formatters.media');
        $build = _slick_fields_format_media($settings, $items, $entity_type, $field, $view_mode);
        if ($is_asnavfor) {
          $thumb = _slick_fields_format_media($settings, $items, $entity_type, $field, $view_mode, TRUE);
        }
        break;

      case 'field_collection':
        $attach['attach_media'] = TRUE;
        module_load_include('inc', 'slick_fields', 'includes/slick_fields.formatters.field_collection');
        $build = _slick_fields_format_field_collection($settings, $items, $field, $view_mode, $langcode);
        if ($is_asnavfor) {
          $thumb = _slick_fields_format_field_collection($settings, $items, $field, $view_mode, $langcode, TRUE);
        }
        break;
    }

    // Inline CSS is to colorize individual slide, or for fullscreen skin.
    if ($settings['inline_css']) {
      $css = implode("\n", $settings['inline_css']);
      // Allows inline css output information to be altered.
      drupal_alter('slick_fields_inline_css_output_info', $css, $items, $settings);
      $attach['attach_inline_css'] = $css;
    }

    $slick[0] = array(
      '#theme' => 'slick',
      '#items' => $build,
      '#settings' => $settings,
      '#attached' => slick_attach($attach),
    );

    // Overrides common options to re-use an optionset.
    if ($settings['override']) {
      $overridables = array();
      // Respect empty values, meaning FALSE.
      foreach ($settings['overridables'] as $key => $override) {
        $overridables[$key] = empty($override) ? FALSE : TRUE;
      }
      $slick[0]['#options'] = $overridables;
    }

    if ($is_asnavfor) {
      $settings['attributes']['id'] = $thumbnail_id;
      $settings['content_attributes']['id'] = $thumbnail_id . '-slider';
      $settings['optionset'] = $settings['optionset_thumbnail'];
      $settings['current_display'] = 'thumbnail';

      if ($is_asnavfor_auto) {
        $settings['asnavfor_target'] = '#' . $item_id . '-slider';
      }
      elseif ($settings['asnavfor_thumbnail']) {
        $settings['asnavfor_target'] = $settings['asnavfor_thumbnail'];
      }

      $slick[1] = array(
        '#theme' => 'slick',
        '#items' => $thumb,
        '#settings' => $settings,
        '#attached' => array(),
      );

      $element = array(
        '#theme' => 'slick_wrapper',
        '#items' => $slick,
        '#settings' => $settings,
      );
    }
    else {
      $element = $slick[0];
    }
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function slick_fields_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  form_load_include($form_state, 'inc', 'slick', 'includes/slick.admin');
  form_load_include($form_state, 'inc', 'slick_fields', 'includes/slick_fields.formatters.admin');

  $elements = _slick_fields_field_formatter_settings_form($field, $instance, $view_mode, $form, $form_state);
  return $elements;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function slick_fields_field_formatter_settings_summary($field, $instance, $view_mode) {
  module_load_include('inc', 'slick_fields', 'includes/slick_fields.formatters.admin');
  $summary = _slick_fields_field_formatter_settings_summary($field, $instance, $view_mode);

  // Build settings summary.
  return implode('<br />', $summary);
}

/**
 * Gets default field formatter settings.
 *
 * Field default settings are only available once they are saved, so provide
 * them beforehand to avoid notices, and extra checks when a feature is added/
 * unavailable conditionally. The settings form will store relevant settings by
 * the current supported field type.
 *
 * @return array
 *   An alterable array of all supported field formatter settings.
 */
function slick_fields_get_default_settings() {
  $settings = array(
    'optionset' => 'default',
    'optionset_thumbnail' => '',
    'asnavfor_main' => '',
    'asnavfor_thumbnail' => '',
    'asnavfor_auto' => FALSE,
    'skin' => '',
    'skin_thumbnail' => '',
    'skin_arrows' => '',
    'skin_dots' => '',
    'slide_layout' => '',
    'image_style' => '',
    'thumbnail_style' => '',
    'thumbnail_hover' => FALSE,
    'thumbnail_caption' => '',
    'slide_image' => '',
    'slide_caption' => array(),
    'media_switch' => '',
    'mousewheel' => FALSE,
    'override' => FALSE,
    'overridables' => array(),

    // Declare all conditional settings to avoid extra checks.
    'slide_classes' => '',
    'color_field' => '',
    'nested_slick' => FALSE,
    'nested_optionset' => '',
    'nested_style' => '',
    'slide_overlay' => array(),
    'slide_link' => '',
    'slide_title' => '',
    'view_mode' => '',
    'aspect_ratio' => '',
    'aspect_ratio_overlay' => FALSE,
    'picture' => FALSE,
    'picture_style' => '',
    'picture_fallback' => '',
    'colorbox_style' => '',
    'is_lightbox' => FALSE,
  );

  // Allows settings information to be altered.
  drupal_alter('slick_fields_default_settings_info', $settings);
  return $settings;
}

/**
 * Implements hook_entity_info_alter().
 */
function slick_fields_entity_info_alter(&$entity_info) {
  $view_mode = 'slick_carousel';
  foreach ($entity_info as $key => $entity) {
    switch ($key) {
      case 'file':
      case 'field_collection_item':
        if (!isset($entity_info[$key]['view modes'][$view_mode])) {
          $entity_info[$key]['view modes'][$view_mode] = array(
            'label' => t('@label', array(
              '@label' => ucwords(str_replace("_", " ", $view_mode)),
            )),
            'custom settings' => FALSE,
          );
        }
        break;

      default:
        break;
    }
  }
}
